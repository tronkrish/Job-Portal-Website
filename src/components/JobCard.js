import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
const JobCard = ({ job, onViewDetails, onApply }) => {
    return (_jsxs("div", { className: "bg-white p-6 rounded-lg border shadow-sm hover:shadow-md transition-shadow", children: [_jsxs("div", { className: "flex items-start justify-between mb-4", children: [_jsxs("div", { className: "flex items-center space-x-4", children: [_jsx("img", { src: job.logo, alt: `${job.company} logo`, className: "w-12 h-12 rounded" }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold text-blue-700 hover:text-blue-800 cursor-pointer", onClick: () => onViewDetails(job), children: job.title }), _jsx("p", { className: "text-gray-600", children: job.company })] })] }), _jsxs("div", { className: "flex flex-col items-end", children: [_jsxs("span", { className: "text-sm text-gray-500 mb-1", children: ["Posted: ", job.posted] }), job.applied && (_jsx(Badge, { variant: "success", className: "bg-green-500", children: "Applied" }))] })] }), _jsxs("div", { className: "mb-4", children: [_jsxs("div", { className: "flex flex-wrap gap-2 mb-2", children: [_jsx(Badge, { variant: "outline", className: "bg-gray-100", children: job.location }), _jsx(Badge, { variant: "outline", className: "bg-gray-100", children: job.type }), _jsxs(Badge, { variant: "outline", className: "bg-gray-100", children: [job.experience, " ", job.experience === 1 ? "year" : "years", " exp"] }), _jsx(Badge, { variant: "outline", className: "bg-gray-100", children: job.salary })] }), _jsxs("div", { className: "flex flex-wrap gap-1 mt-3", children: [job.skills.slice(0, 5).map((skill) => (_jsx(Badge, { variant: "secondary", className: "bg-blue-100 text-blue-800 text-xs", children: skill.name }, skill.id))), job.skills.length > 5 && (_jsxs(Badge, { variant: "secondary", className: "bg-blue-100 text-blue-800 text-xs", children: ["+", job.skills.length - 5, " more"] }))] })] }), _jsxs("div", { className: "flex justify-end", children: [_jsx(Button, { variant: "outline", className: "mr-2", onClick: () => onViewDetails(job), children: "View Details" }), _jsx(Button, { onClick: () => onApply(job), disabled: job.applied, children: job.applied ? "Applied" : "Apply Now" })] })] }));
};
export default JobCard;
